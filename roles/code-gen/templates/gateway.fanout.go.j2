package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
  "math/rand"

	"github.com/gin-gonic/gin"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

{% for i in range(1, count | int + 1) %}
	pb{{ i }} "{{ go.module_base_path }}/{{ name }}/gateway/pb-fanout-{{ i }}"
{% endfor %}
)

const (
	ListenPort           = "{{ base_service_port }}"
{% for i in range(1, count | int + 1) %}
	FanoutClient{{ i }}Address = "localhost:{{ base_service_port + i | int + 1}}"
{% endfor %}
)

{% for i in range(1, count | int + 1) %}
var fanout_{{ i }}Client pb{{ i }}.Fanout_{{ i }}Client
{% endfor %}

func main() {
	listenPort := ListenPort
	if os.Getenv("LISTEN_PORT") != "" {
		listenPort = os.Getenv("LISTEN_PORT")
	}
{% for i in range(1, count | int + 1) %}
	fanoutClient{{ i }}Address := FanoutClient{{ i }}Address
	if os.Getenv("FANOUT_CLIENT_{{ i }}_ADDRESS") != "" {
		fanoutClient{{ i }}Address = os.Getenv("FANOUT_CLIENT_{{ i }}_ADDRESS")
	}
{% endfor %}

	var optsClient []grpc.DialOption
	optsClient = append(optsClient, grpc.WithTransportCredentials(insecure.NewCredentials()))

{% for i in range(1, count | int + 1) %}
	conn_{{ i }}, err := grpc.Dial(fanoutClient{{ i }}Address, optsClient...)
	if err != nil {
		log.Fatalf("Cannot establish connection with the server: %v", err)
	}
	log.Printf("Dialed and established connection with %v", fanoutClient{{ i }}Address)
	defer conn_{{ i }}.Close()

	fanout_{{ i }}Client = pb{{ i }}.NewFanout_{{ i }}Client(conn_{{ i }})
  log.Printf("established connection at %s", fanoutClient{{ i }}Address)

{% endfor %}
  router := gin.Default()
  router.GET("/", handler)
  router.Run(fmt.Sprintf(":%s", listenPort))
}

func handler(c *gin.Context) {
  res := []int32{rand.Int31n(50)}

{% for i in range(1, count | int + 1) %}
  fanout_{{ i }}Req := new(pb{{ i }}.Req)
  fanout_{{ i }}Req.Ids = res
	fanout_{{ i }}Res, err := fanout_{{ i }}Client.GetIds(context.Background(), fanout_{{ i }}Req)
	if err == nil {
		res = fanout_{{ i }}Res.Ids
	} else {
    c.JSON(http.StatusBadRequest, gin.H{
      "status": "failed",
      "message": err.Error(),
    })
    return
	}
{% endfor %}

  c.JSON(http.StatusOK, gin.H{
    "status": "success",
    "message": res,
  })
}
