{% set i = x | int %}
package main

import (
	"context"
	"log"
	"net"
  "os"
  "fmt"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
{% if count > i %}
	"google.golang.org/grpc/credentials/insecure"
{% endif %}
	"google.golang.org/grpc/status"
	healthpb "google.golang.org/grpc/health/grpc_health_v1"

	"{{ go.module_base_path }}/{{ name }}/chain-{{ i }}/connections/mongo"
	pb "{{ go.module_base_path }}/{{ name }}/chain-{{ i }}/pb-chain-{{ i }}"
{% if count > i %}
	pbc "{{ go.module_base_path }}/{{ name }}/chain-{{ i }}/pb-chain-{{ i + 1 }}"
{% endif %}
)

type chain_{{ i }}Server struct {
	pb.UnimplementedChain_{{ i }}Server
}

const (
  ListenPort = "3001"
  ChainNextAddress = "localhost:3002"
  DbAddress = "mongodb://localhost:27017"
  DbUser = "{{ db.username }}"
  DbPassword = "{{ db.password }}"
  DbName = "{{ name }}"
  CollectionName = "{{ type }}{{ x }}"
)

var mongoConnection *mongo.Mongo

{% if count > i %}
var nextChain pbc.Chain_{{ i + 1 }}Client
{% endif %}

func main() {
	listenPort := ListenPort
	if os.Getenv("LISTEN_PORT") != "" {
		listenPort = os.Getenv("LISTEN_PORT")
	}
  {% if count > i %}
	chainNextAddress := ChainNextAddress
	if os.Getenv("CHAIN_NEXT_ADDRESS") != "" {
		chainNextAddress = os.Getenv("CHAIN_NEXT_ADDRESS")
	}
  {% endif %}
	dbAddress := DbAddress
	if os.Getenv("DB_ADDRESS") != "" {
		dbAddress = os.Getenv("DB_ADDRESS")
	}
	dbUser := DbUser
	if os.Getenv("DB_USER") != "" {
		dbUser = os.Getenv("DB_USER")
	}
	dbPassword := DbPassword
	if os.Getenv("DB_PASSWORD") != "" {
		dbPassword = os.Getenv("DB_PASSWORD")
	}
	dbName := DbName
	if os.Getenv("DB_NAME") != "" {
		dbName = os.Getenv("DB_NAME")
	}
	collectionName := CollectionName
	if os.Getenv("COLLECTION_NAME") != "" {
		collectionName = os.Getenv("COLLECTION_NAME")
	}

  lis, err := net.Listen("tcp", fmt.Sprintf(":%s", listenPort))
  if err != nil {
    log.Fatalf("failed to listen: %v", err)
  }
  var opts []grpc.ServerOption
  grpcServer := grpc.NewServer(opts...)
  svc := new(chain_{{ i }}Server)
  pb.RegisterChain_{{ i }}Server(grpcServer, svc)
  healthpb.RegisterHealthServer(grpcServer, svc)

	mongoConnection, err = mongo.InitMongo(dbAddress, dbUser, dbPassword, dbName, collectionName)
  if err != nil {
    log.Fatalf("failed to connect to mongodb: %v", err)
  }
  log.Printf("Established connection with %v", dbAddress)
  defer mongoConnection.Disconnect()

  {% if count > i %}
  var optsClient []grpc.DialOption
  optsClient = append(optsClient, grpc.WithTransportCredentials(insecure.NewCredentials()))

  conn, err := grpc.Dial(chainNextAddress, optsClient...)
  if err != nil {
    log.Fatalf("Cannot establish connection with the server: %v", err)
  }
  log.Printf("Dialed and established connection with %v", chainNextAddress)
  defer conn.Close()

  nextChain = pbc.NewChain_{{ i + 1 }}Client(conn)
  {% endif %}

  log.Printf("Starting server at port %v", listenPort)
  grpcServer.Serve(lis)
}

func (s chain_{{ i }}Server) GetIds(ctx context.Context, req *pb.Req) (*pb.Res, error) {
  {% if count > i %}
  next := new(pbc.Req)
  next.Ids = req.Ids
  {% endif %}

  res := new(pb.Res)
  res.Ids = req.Ids

  newId, err := mongoConnection.GetItem(req.Ids[len(req.Ids)-1])
  if err == nil {
  {% if count > i %}
    next.Ids = append(next.Ids, newId)
  {% else %}
    res.Ids = append(res.Ids, newId)
  {% endif %}
  } else {
    log.Printf("Failed to retrieve item: %v", err)
  }

  {% if count > i %}
  nextRes, err := nextChain.GetIds(context.Background(), next)
  if err == nil {
    res.Ids = nextRes.Ids
  } else {
    log.Printf("Failed to retrieve ids: %v", err)
  }
  {% endif %}
	return res, err
}

func (s *chain_{{ i }}Server) Check(ctx context.Context, req *healthpb.HealthCheckRequest) (*healthpb.HealthCheckResponse, error) {
	return &healthpb.HealthCheckResponse{Status: healthpb.HealthCheckResponse_SERVING}, nil
}

func (s *chain_{{ i }}Server) Watch(req *healthpb.HealthCheckRequest, ws healthpb.Health_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "health check via Watch not implemented")
}
