# vim: set filetype=yaml.ansible :
---
- name: Auto generate source code for chain or fanout topology
  hosts: localhost
  tasks:
    - name: Prepare root directory
      ansible.builtin.file:
        path: "./{{ name }}"
        state: directory
        mode: "1777"

    - name: Generate code for fanout
      when: "(type) == 'fanout'"
      block:
        - name: Prepare directory tree and initialize go mod
          block:
            - name: Create directories for leaves and branch
              ansible.builtin.file:
                path: "./{{ name }}/fanout_{{ item }}"
                state: directory
                mode: "1777"
              with_sequence: "start=0 count={{ count | int + 1 }} format=%s"

            - name: Create directories for protocol buffer
              ansible.builtin.file:
                path: "./{{ name }}/fanout_{{ item }}/pb_fanout_{{ item }}"
                state: directory
                mode: "1777"
              with_sequence: "start=0 count={{ count | int + 1 }} format=%s"

            - name: Create directories for mongo code
              ansible.builtin.file:
                path: "./{{ name }}/fanout_{{ item }}/connections"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Initialize go modules
              ansible.builtin.command: "go mod init {{ go.module_base_path }}/{{ name }}/fanout_{{ item }}"
              args:
                chdir: "./{{ name }}/fanout_{{ item }}"
                creates: go.mod
              with_sequence: "start=0 count={{ count | int + 1 }} format=%s"

        - name: Prepare source code files
          block:
            - name: Generate proto files from template
              ansible.builtin.template:
                src: ./templates/fanout.proto.j2
                dest: "./{{ name }}/fanout_{{ item }}/pb_fanout_{{ item }}/fanout.proto"
                mode: "1777"
              vars:
                fanout_x: "{{ item }}"
              with_sequence: "start=0 count={{ count | int + 1 }} format=%s"

            - name: Generate go files
              ansible.builtin.template:
                src: ./templates/branch.go.j2
                dest: "./{{ name }}/fanout_0/main.go"
                mode: "1777"

            - name: Generate go files
              ansible.builtin.template:
                src: ./templates/leaf.go.j2
                dest: "./{{ name }}/fanout_{{ item }}/main.go"
                mode: "1777"
              vars:
                fanout_x: "{{ item }}"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: copy mongo go files
              ansible.builtin.copy:
                src: ./files/connections/
                dest: "./{{ name }}/fanout_{{ item }}/connections/"
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

        - name: Generate and copy grpc code
          block:
            - name: Run protoc to generate grpc code
              ansible.builtin.command:
              args:
                cmd: "protoc --go_out=. --go_opt=paths=source_relative \
                      --go-grpc_out=. --go-grpc_opt=paths=source_relative \
                      pb_fanout_{{ item }}/fanout.proto"
                chdir: "./{{ name }}/fanout_{{ item }}"
                creates: "./{{ name }}/fanout_{{ item }}/fanout.pb.go"
              with_sequence: "start=0 count={{ count | int + 1 }} format=%s"

            - name: Ensure that directory for external grpc files exists
              ansible.builtin.file:
                path: "./{{ name }}/fanout_0/pb_fanout_{{ item }}"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count | int }} format=%s"

            - name: Copy generated grpc files
              ansible.builtin.copy:
                src: "./{{ name }}/fanout_{{ item }}/pb_fanout_{{ item }}/"
                dest: "./{{ name }}/fanout_0/pb_fanout_{{ item }}/"
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

        - name: Tidy go modules
          ansible.builtin.command: "go mod tidy"
          args:
            chdir: "./{{ name }}/fanout_{{ item }}"
            creates: go.sum
          with_sequence: "start=0 count={{ count | int + 1 }} format=%s"

        - name: Prepare docker-compose components
          block:
            - name: Create directory for database
              ansible.builtin.file:
                path: "./{{ name }}/db"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Create directory for database volume
              ansible.builtin.file:
                path: "./{{ name }}/db/data"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Create directory for database init scripts
              ansible.builtin.file:
                path: "./{{ name }}/db/scripts"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Generate mongoScript.js
              ansible.builtin.template:
                src: ./templates/mongoScript.js.j2
                dest: ./{{ name }}/db/scripts/mongoScript.js
                mode: "1777"

            - name: Copy dockerfile
              ansible.builtin.copy:
                src: ./files/go.Dockerfile
                dest: "./{{ name }}/go.Dockerfile"
                mode: "1777"

            - name: Generate docker-compose.yaml
              ansible.builtin.template:
                src: ./templates/docker-compose.fanout.yaml.j2
                dest: "./{{ name }}/docker-compose.yaml"
                mode: "1777"

    - name: Generate code for fanout
      when: "(type) == 'chain'"
      block:
        - name: Prepare directory tree and initialize go mod
          block:
            - name: Create directories for each microservice
              ansible.builtin.file:
                path: "./{{ name }}/chain_{{ item }}"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Create directories for protocol buffer
              ansible.builtin.file:
                path: "./{{ name }}/chain_{{ item }}/pb_chain_{{ item }}"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Create directories for mongo code
              ansible.builtin.file:
                path: "./{{ name }}/chain_{{ item }}/connections"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Initialize go modules
              ansible.builtin.command: "go mod init {{ go.module_base_path }}/{{ name }}/chain_{{ item }}"
              args:
                chdir: "./{{ name }}/chain_{{ item }}"
                creates: go.mod
              with_sequence: "start=1 count={{ count }} format=%s"

        - name: Prepare source code files
          block:
            - name: Generate proto files from template
              ansible.builtin.template:
                src: ./templates/chain.proto.j2
                dest: "./{{ name }}/chain_{{ item }}/pb_chain_{{ item }}/chain.proto"
                mode: "1777"
              vars:
                chain_x: "{{ item }}"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Generate go files
              ansible.builtin.template:
                src: ./templates/chain.go.j2
                dest: "./{{ name }}/chain_{{ item }}/main.go"
                mode: "1777"
              vars:
                chain_x: "{{ item }}"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: copy mongo go files
              ansible.builtin.copy:
                src: ./files/connections/
                dest: "./{{ name }}/chain_{{ item }}/connections/"
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

        - name: Generate and copy grpc code
          block:
            - name: Run protoc to generate grpc code
              ansible.builtin.command:
              args:
                cmd: "protoc --go_out=. --go_opt=paths=source_relative \
                      --go-grpc_out=. --go-grpc_opt=paths=source_relative \
                      pb_chain_{{ item }}/chain.proto"
                chdir: "./{{ name }}/chain_{{ item }}"
                creates: "./{{ name }}/chain_{{ item }}/chain.pb.go"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Ensure that directory for external grpc files exists
              ansible.builtin.file:
                path: "./{{ name }}/chain_{{ item | int + 1 }}/pb_chain_{{ item | int + 1 }}"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count | int - 1 }} format=%s"

            - name: Copy generated grpc files
              ansible.builtin.copy:
                src: "./{{ name }}/chain_{{ item | int + 1 }}/pb_chain_{{ item | int + 1 }}/"
                dest: "./{{ name }}/chain_{{ item }}/pb_chain_{{ item | int + 1 }}/"
                mode: "1777"
              with_sequence: "start=1 count={{ count | int - 1 }} format=%s"

        - name: Tidy go modules
          ansible.builtin.command: "go mod tidy"
          args:
            chdir: "./{{ name }}/chain_{{ item }}"
            creates: go.sum
          with_sequence: "start=1 count={{ count }} format=%s"

        - name: Prepare docker-compose components
          block:
            - name: Create directory for database
              ansible.builtin.file:
                path: "./{{ name }}/db"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Create directory for database volume
              ansible.builtin.file:
                path: "./{{ name }}/db/data"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Create directory for database init scripts
              ansible.builtin.file:
                path: "./{{ name }}/db/scripts"
                state: directory
                mode: "1777"
              with_sequence: "start=1 count={{ count }} format=%s"

            - name: Generate mongoScript.js
              ansible.builtin.template:
                src: ./templates/mongoScript.js.j2
                dest: ./{{ name }}/db/scripts/mongoScript.js
                mode: "1777"

            - name: Copy dockerfile
              ansible.builtin.copy:
                src: ./files/go.Dockerfile
                dest: "./{{ name }}/go.Dockerfile"
                mode: "1777"

            - name: Generate docker-compose.yaml
              ansible.builtin.template:
                src: ./templates/docker-compose.chain.yaml.j2
                dest: "./{{ name }}/docker-compose.yaml"
                mode: "1777"

    - name: Generate code for entrypoint
      when: "(root | bool)"
      block:
        - name: Prepare directory for entrypoint service
          ansible.builtin.file:
            path: "./{{ name }}/root"
            state: directory
            mode: "1777"

        - name: Initialize go modules
          ansible.builtin.command: "go mod init {{ go.module_base_path }}/{{ name }}/root"
          args:
            chdir: "./{{ name }}/root"
            creates: go.mod

        - name: Generate code for root
          ansible.builtin.template:
            src: ./templates/root.go.j2
            dest: "./{{ name }}/root/main.go"
            mode: "1777"
          vars:
            entryport: "{{ base_port | int + 1 }}"

        - name: Prepare protocol buffer for entrypoint
          when: "(type) == 'fanout'"
          block:
            - name: Prepare directory for protocol buffer code
              ansible.builtin.file:
                path: "./{{ name }}/root/pb_fanout_0"
                state: directory
                mode: "1777"

            - name: Copy pb file
              ansible.builtin.copy:
                src: "./{{ name }}/fanout_0/pb_fanout_0/"
                dest: "./{{ name }}/root/pb_fanout_0/"
                mode: "1777"

        - name: Prepare protocol buffer for entrypoint
          when: "(type) == 'chain'"
          block:
            - name: Prepare directory for protocol buffer code
              ansible.builtin.file:
                path: "./{{ name }}/root/pb_chain_1"
                state: directory
                mode: "1777"

            - name: Copy pb file
              ansible.builtin.copy:
                src: "./{{ name }}/chain_1/pb_chain_1/"
                dest: "./{{ name }}/root/pb_chain_1/"
                mode: "1777"

        - name: Tidy go modules
          ansible.builtin.command: "go mod tidy"
          args:
            chdir: "./{{ name }}/root"
            creates: go.sum
