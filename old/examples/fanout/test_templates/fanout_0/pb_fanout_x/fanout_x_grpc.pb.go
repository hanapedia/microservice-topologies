// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: pb_fanout_x/fanout_x.proto

package pb_fanout_x

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FanoutXClient is the client API for FanoutX service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FanoutXClient interface {
	GetIds(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type fanoutXClient struct {
	cc grpc.ClientConnInterface
}

func NewFanoutXClient(cc grpc.ClientConnInterface) FanoutXClient {
	return &fanoutXClient{cc}
}

func (c *fanoutXClient) GetIds(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/fanout_x.Fanout_x/GetIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FanoutXServer is the server API for FanoutX service.
// All implementations must embed UnimplementedFanoutXServer
// for forward compatibility
type FanoutXServer interface {
	GetIds(context.Context, *Req) (*Res, error)
	mustEmbedUnimplementedFanoutXServer()
}

// UnimplementedFanoutXServer must be embedded to have forward compatible implementations.
type UnimplementedFanoutXServer struct {
}

func (UnimplementedFanoutXServer) GetIds(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIds not implemented")
}
func (UnimplementedFanoutXServer) mustEmbedUnimplementedFanoutXServer() {}

// UnsafeFanoutXServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FanoutXServer will
// result in compilation errors.
type UnsafeFanoutXServer interface {
	mustEmbedUnimplementedFanoutXServer()
}

func RegisterFanoutXServer(s grpc.ServiceRegistrar, srv FanoutXServer) {
	s.RegisterService(&FanoutX_ServiceDesc, srv)
}

func _FanoutX_GetIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FanoutXServer).GetIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fanout_x.Fanout_x/GetIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FanoutXServer).GetIds(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// FanoutX_ServiceDesc is the grpc.ServiceDesc for FanoutX service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FanoutX_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fanout_x.Fanout_x",
	HandlerType: (*FanoutXServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIds",
			Handler:    _FanoutX_GetIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_fanout_x/fanout_x.proto",
}
