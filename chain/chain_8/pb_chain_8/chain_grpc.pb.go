// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: pb_chain_8/chain.proto

package pb_chain_8

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Chain_8Client is the client API for Chain_8 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Chain_8Client interface {
	GetIds(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type chain_8Client struct {
	cc grpc.ClientConnInterface
}

func NewChain_8Client(cc grpc.ClientConnInterface) Chain_8Client {
	return &chain_8Client{cc}
}

func (c *chain_8Client) GetIds(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/chain_8.Chain_8/GetIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Chain_8Server is the server API for Chain_8 service.
// All implementations must embed UnimplementedChain_8Server
// for forward compatibility
type Chain_8Server interface {
	GetIds(context.Context, *Req) (*Res, error)
	mustEmbedUnimplementedChain_8Server()
}

// UnimplementedChain_8Server must be embedded to have forward compatible implementations.
type UnimplementedChain_8Server struct {
}

func (UnimplementedChain_8Server) GetIds(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIds not implemented")
}
func (UnimplementedChain_8Server) mustEmbedUnimplementedChain_8Server() {}

// UnsafeChain_8Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Chain_8Server will
// result in compilation errors.
type UnsafeChain_8Server interface {
	mustEmbedUnimplementedChain_8Server()
}

func RegisterChain_8Server(s grpc.ServiceRegistrar, srv Chain_8Server) {
	s.RegisterService(&Chain_8_ServiceDesc, srv)
}

func _Chain_8_GetIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chain_8Server).GetIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain_8.Chain_8/GetIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chain_8Server).GetIds(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// Chain_8_ServiceDesc is the grpc.ServiceDesc for Chain_8 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chain_8_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain_8.Chain_8",
	HandlerType: (*Chain_8Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIds",
			Handler:    _Chain_8_GetIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_chain_8/chain.proto",
}
